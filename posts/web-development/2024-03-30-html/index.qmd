---
title: "HTML5"
author: "Samith Va"
date: "2024-03-30"
toc: true
categories: [web development]
---

HTML5 is the latest version of the Hypertext Markup Language (HTML), which is the standard language used to create and design web pages and applications. It is a significant update to the HTML specification, introducing new features, elements, and APIs to enhance the functionality, semantics, and interoperability of web documents.

Contents will be included in this page:

1. How form is used in html ? How it post the data from to the server ?
1. What are some modern html elements structure ?
1. What is **reverse tabnabbing** ? How does it work ?

## Form 

### Method Attribute

- The `method` attribute specifies the *HTTP method that the browser uses to submit the form data to the server*.
- It can take two values: `GET` or `POST`.
    - `GET`: The form data is appended to the URL in the form of query parameters. This method is suitable for submitting small amounts of data.
    - `POST`: The form data is sent in the request body. This method is suitable for submitting large amounts of data and sensitive information.

```html
<form method="POST" action="submit.php"> 
	<!-- Form fields go here --> 
	<input type="submit" value="Submit"> 
</form>
```

### Action Attribute

- The `action` attribute specifies the *URL where the form data is submitted*.
- It can be a relative or absolute URL. If it's a relative URL, it is resolved relative to the current page.
- The server-side script specified in the `action` attribute typically processes the form data and sends a response back to the client.

```html
<form method="POST" action="/submit">
    <label for="username">Username:</label>
	<input type="text" id="username" name="username">
    <input type="submit" value="Submit">
</form>
```

### For Attribute

- The `for` attribute is used in `<label>` elements to *specify which form element the label is associated with*.
- It is particularly useful for improving accessibility and usability as it allows users to click on the label text to focus or select the associated form element.
- The value of the `for` attribute should match the `id` attribute of the form element it is associated with.

```html
<label for="username">Username:</label>
<input type="text" id="username" name="username">
```

## Modern HTML Containers

### Section

The `<section>` element is used to define sections within a document or webpage. It's often used to group related content together and can provide a semantic meaning to the sections of a webpage.

```html
<section>
    <!-- Section content goes here -->
</section>
```

### Div

The `<div>` element is a generic container that can be used to group elements together or create divisions within a webpage. It's very flexible and commonly used in CSS for styling purposes.

```html
<div> 
	<!-- Content goes here --> 
</div>
```

### Fieldset

`<fieldset>` is a container element used to group related form elements together. It's typically used along with the `<legend>` element, which provides a caption or title for the `<fieldset>`.

```html
<form>
  <fieldset>
    <legend>Personal Information</legend>
    <label for="fname">First Name:</label>
    <input type="text" id="fname" name="fname"><br><br>
    <label for="lname">Last Name:</label>
    <input type="text" id="lname" name="lname"><br><br>
  </fieldset>
  
  <fieldset>
    <legend>Contact Information</legend>
    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br><br>
    <label for="phone">Phone:</label>
    <input type="tel" id="phone" name="phone"><br><br>
  </fieldset>
  
  <input type="submit" value="Submit">
</form>
```
### Article 

`<article>`: The `<article>` element represents a self-contained piece of content that could be distributed and reused independently. It's commonly used for blog posts, news articles, forum posts, etc.

```html
<article> 
<!-- Article content goes here --> 
</article>
```

### Modern HTML5 elements

`<header>`, `<footer>`, `<nav>`, `<main>`: These elements are part of HTML5 and are used to define specific structural parts of a webpage.

- `<header>`: Typically used to contain introductory content or navigation links at the top of a webpage.
- `<footer>`: Contains footer information such as copyright, contact details, etc., usually placed at the bottom of a webpage.
- `<nav>`: Used to define navigation links.
- `<main>`: Represents the main content area of a webpage.

```html
<header> 
	<!-- Header content goes here --> 
</header> 
<footer> 
	<!-- Footer content goes here --> 
</footer> 
<nav> 
	<!-- Navigation links go here --> 
</nav> 
<main> 
	<!-- Main content goes here --> 
</main>
```

Modern HTML layout design flowchart 

![Modern HTML Stucture Design Flowchat (From html5 Doctor)](modern_html.png)

## Security Risks and Preventions

### Reverse Tabnabbing
 
Reverse tabnabbing is a security vulnerability that occurs when a website opens a link in a new tab or window (`target="_blank"`) and the newly opened page can manipulate the original page through the `window.opener` property.

Here's how it works:

1. **Initial Action:** A user clicks on a link on a website that opens in a new tab or window using `target="_blank"`.
2. **New Page Opens:** The new page opens in a separate browsing context, typically in a new tab.
3. **Manipulation:** If the new page contains malicious code, it can access the `window.opener` property, which refers to the page that opened it. With this access, the malicious page can redirect the original page (the one that opened the link) to a phishing site, alter its content, or perform other malicious actions.

Reverse tabnabbing can be exploited by attackers to deceive users into thinking they are interacting with a legitimate website while actually being redirected to a malicious one.

To mitigate this security risk, web developers can use the following methods:

1. **Rel="noopener noreferrer":** Adding `rel="noopener noreferrer"` to anchor (`<a>`) elements that open links in a new tab or window prevents the newly opened page from accessing `window.opener` and ensures that the HTTP referer header is not sent, enhancing both security and privacy.
    
2. **Explicit Rel="noopener":** Alternatively, if `noreferrer` is not desired, using `rel="noopener"` alone can prevent access to `window.opener`. However, `noreferrer` adds an extra layer of protection by also preventing the referer header from being sent.

```html
<a href='https:www.google.com' target='_blank' rel='noopener norefered'> Google.com </a>
```




