{
  "hash": "d1bc1511fcf9a7dd01710172bf3d957f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"OpenCV\"\nauthor: \"Samith Va\"\ndate: \"2024-03-23\"\ncategories: [deep learning]\nformat:\n  html:\n    code-fold: false\n    toc: true\njupyter: python3\n---\n\n\nOpenCV is an open-source computer vision and machine learning software library. It provides a wide range of functionalities for image and video processing. \n\nHere's a crash course on using OpenCV in Python.\n\n## Installation:\nInstall OpenCV for Python via pip: `pip install opencv-python`\n\n## Basic Operations\n### 1. Reading and displaying image\n\nWe can read an image by using `imread` in cv2 library. Then show image element using `imshow`.\n\n```python\n#| label: cv-output\n#| fig-cap: Show an image using imshow() \n\nimport cv2\n# Read an image from file\nimage = cv2.imread('image.jpg')\n\n# Display the image in a window\ncv2.imshow('Image', image)\n\n# Wait for a key press and then close the window\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\n![Output](image.jpg){width=30%}\n\n### 2. Writing image\n```python\nimport cv2\n# Read an image in BGR\nimage = cv2.imread('image.jpg')\n\n# Write the image to a file\ncv2.imwrite('output_image.jpg', image)\n```\n### 3. Coverting color spaces\n\nOpenCV provides functions to convert images between different color spaces, such as RGB, BGR, HSV, etc.\n\n```python\nimport cv2\n# Read an image\nimage = cv2.imread('image.jpg')\n\n# Convert BGR to grayscale\ngray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n# Convert BGR to HSV\nhsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\ncv2.imwrite('gray_image.jpg', gray_image)\ncv2.imwrite('hsv_image.jpg', hsv_image)\n```\n::: {layout-ncol=2 layout-valign=\"bottom\"}\n![Grey](gray_image.jpg)\n\n![HSV](hsv_image.jpg)\n:::\n\n### 4. Resizing and Cropping Images\n\nResize images to a specific width and height or by a scaling factor. Cropping involves selecting a region of interest (ROI) from the image.\n\n```python\nimport cv2\n# Read an image\nimage = cv2.imread('image.jpg')\n\n# Resize the image to a specific width and height\nnew_width, new_height = 200, 200\nresized_image = cv2.resize(image, (new_width, new_height))\n\n# Resize the image by a scaling factor\nscale_percent = 50  # percent of original size\nwidth = int(image.shape[1] * scale_percent / 100)\nheight = int(image.shape[0] * scale_percent / 100)\nresized_image = cv2.resize(image, (width, height))\ncv2.imwrite('resized.jpg', resized_image)\n\n# Crop a region of interest (ROI) from the image\nx, y, w, h = 100, 100, 200, 200  # Example coordinates and dimensions\ncropped_image = image[y:y+h, x:x+w]\ncv2.imwrite('cropped.jpg', cropped_image)\n\n```\n\n::: {layout-ncol=2 layout-valign=\"bottom\"}\n![Resized](resized.jpg)\n\n![Cropped](cropped.jpg)\n:::\n\n### 5. Flipping Images\n\nThe function flip flips the array in one of three different ways (row and column indices are 0-based):\n`dst = cv.flip( src, flipCode )`\n`dst`: output array of the same size and type as src.\n\nThe function has 2 required arguments:\n\n- `src`: input image\n- `flipCode`: a flag to specify how to flip the array; 0 means flipping around the x-axis and positive value (for example, 1) means flipping around y-axis. Negative value (for example, -1) means flipping around both axes.\n\n::: {#42b4d54a .cell execution_count=1}\n``` {.python .cell-code}\nimport cv2\nimport matplotlib.pyplot as plt\n\nimg_bgr = cv2.imread('image.jpg')\nimg_rgb = img_bgr[:, :, ::-1]\n\nimg_rgb_flipped_horz = cv2.flip(img_rgb, 1)\nimg_rgb_flipped_vert = cv2.flip(img_rgb, 0)\nimg_rgb_flipped_both = cv2.flip(img_rgb, -1)\n\n# Show the images\nplt.figure(figsize=(18, 5))\nplt.subplot(141) # 141 : 1 row, 4 columns, current index of subplot\nplt.imshow(img_rgb)\nplt.title(\"Original\")\nplt.subplot(142) \nplt.imshow(img_rgb_flipped_horz)\nplt.title(\"Horizontal Flip\")\nplt.subplot(143)\nplt.imshow(img_rgb_flipped_vert)\nplt.title(\"Vertical Flip\")\nplt.subplot(144)\nplt.imshow(img_rgb_flipped_both)\nplt.title(\"Both Flipped\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=1393 height=294}\n:::\n:::\n\n\n### 6. Reading and Displaying Videos\n\n```python\nimport cv2\n\n# Open a video file\ncap = cv2.VideoCapture('video.mp4')\n\nwhile cap.isOpened():\n    ret, frame = cap.read()\n    if not ret:\n        break\n    cv2.imshow('Video', frame)\n    if cv2.waitKey(25) & 0xFF == ord('q'):\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n\n```\n\n\nFore more reference, visit [OpenCV Documentation](https://docs.opencv.org/4.x/index.html)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}